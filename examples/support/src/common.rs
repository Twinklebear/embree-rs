pub const DEFAULT_DISPLAY_WIDTH: u32 = 512;
pub const DEFAULT_DISPLAY_HEIGHT: u32 = 512;

/// Size (horizontal) of a screen tile in pixels.
pub const TILE_SIZE_X: u32 = 8;

/// Size (vertical) of a screen tile in pixels.
pub const TILE_SIZE_Y: u32 = 8;

/// Size of a screen tile in pixels.
pub const TILE_SIZE: u32 = TILE_SIZE_X * TILE_SIZE_Y;

pub const PERMUTATIONS: [u32; 513] = [
    151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69,
    142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219,
    203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175,
    74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230,
    220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76,
    132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173,
    186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206,
    59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163,
    70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,
    178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162,
    241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204,
    176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141,
    128, 195, 78, 66, 215, 61, 156, 180, 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194,
    233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234,
    75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174,
    20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83,
    111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25,
    63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188,
    159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147,
    118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170,
    213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253,
    19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193,
    238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31,
    181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93,
    222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180, 151,
];

pub const G3: [f32; 128 * 4] = [
    -0.582745,
    0.443494,
    -0.680971,
    0.0,
    -0.601153,
    0.791961,
    0.106833,
    0.0,
    -0.265466,
    0.576385,
    -0.772857,
    0.0,
    0.981035,
    0.0963612,
    -0.16818,
    0.0,
    0.524388,
    0.819103,
    0.232568,
    0.0,
    -0.170518,
    -0.43875,
    0.882282,
    0.0,
    0.598053,
    -0.435348,
    0.672908,
    0.0,
    0.53956,
    0.839346,
    -0.0661294,
    0.0,
    -0.782511,
    -0.600267,
    -0.165398,
    0.0,
    -0.122114,
    0.968043,
    0.219044,
    0.0,
    -0.235567,
    0.842331,
    -0.484755,
    0.0,
    -0.158657,
    0.504139,
    0.848924,
    0.0,
    -0.578396,
    0.39317,
    -0.714756,
    0.0,
    0.883328,
    -0.337159,
    -0.325661,
    0.0,
    0.0597264,
    -0.0861552,
    0.99449,
    0.0,
    -0.970124,
    0.233685,
    -0.0651921,
    0.0,
    0.208238,
    -0.858421,
    0.468776,
    0.0,
    0.916908,
    -0.0997567,
    0.38643,
    0.0,
    -0.786568,
    -0.577957,
    -0.217431,
    0.0,
    0.14868,
    0.618251,
    -0.77179,
    0.0,
    -0.24168,
    0.675858,
    0.69628,
    0.0,
    -0.50994,
    0.83025,
    0.225046,
    0.0,
    -0.534183,
    -0.676382,
    -0.507107,
    0.0,
    -0.793861,
    -0.6048,
    -0.0632565,
    0.0,
    -0.92148,
    0.240548,
    -0.304977,
    0.0,
    -0.210037,
    0.39862,
    -0.892741,
    0.0,
    -0.310918,
    0.339375,
    -0.887781,
    0.0,
    0.99836,
    0.0466305,
    -0.0331999,
    0.0,
    -0.0439099,
    0.304806,
    0.951402,
    0.0,
    -0.676304,
    -0.440938,
    0.590073,
    0.0,
    0.339805,
    -0.328495,
    0.881263,
    0.0,
    -0.0625568,
    0.916832,
    0.394342,
    0.0,
    0.776463,
    -0.630153,
    0.00360388,
    0.0,
    -0.224717,
    -0.8758,
    0.427172,
    0.0,
    0.618879,
    -0.70266,
    -0.351081,
    0.0,
    -0.380313,
    0.101503,
    -0.919271,
    0.0,
    0.149639,
    -0.957418,
    0.246897,
    0.0,
    0.128024,
    0.948139,
    0.290932,
    0.0,
    -0.292448,
    0.893976,
    -0.339532,
    0.0,
    -0.192062,
    -0.972477,
    -0.131909,
    0.0,
    0.44007,
    -0.870905,
    0.218776,
    0.0,
    0.303887,
    -0.659003,
    -0.688017,
    0.0,
    0.195552,
    0.41876,
    -0.886792,
    0.0,
    -0.889922,
    0.454236,
    -0.0413315,
    0.0,
    0.515034,
    0.225353,
    -0.827016,
    0.0,
    0.63084,
    -0.573408,
    -0.522728,
    0.0,
    -0.745779,
    0.549592,
    -0.376514,
    0.0,
    0.0711763,
    -0.979204,
    0.189982,
    0.0,
    0.705657,
    0.707887,
    0.0307322,
    0.0,
    0.114603,
    0.655735,
    -0.746242,
    0.0,
    -0.0739232,
    -0.0135353,
    0.997172,
    0.0,
    0.173356,
    -0.20818,
    0.962605,
    0.0,
    0.34008,
    -0.787344,
    0.514232,
    0.0,
    -0.143596,
    0.334295,
    -0.931465,
    0.0,
    0.721989,
    -0.30942,
    -0.618863,
    0.0,
    -0.827657,
    0.0410685,
    0.559729,
    0.0,
    -0.804277,
    -0.418454,
    0.421942,
    0.0,
    -0.379459,
    0.792556,
    0.477353,
    0.0,
    0.0391537,
    0.0756503,
    0.996365,
    0.0,
    0.821943,
    0.237588,
    0.517651,
    0.0,
    -0.788974,
    0.463584,
    -0.403249,
    0.0,
    0.175972,
    0.984364,
    -0.00782073,
    0.0,
    0.891497,
    0.399363,
    0.213873,
    0.0,
    -0.819111,
    0.106216,
    0.563716,
    0.0,
    0.105511,
    0.544028,
    -0.832406,
    0.0,
    -0.464551,
    0.63753,
    0.614612,
    0.0,
    0.232387,
    0.935154,
    -0.267363,
    0.0,
    0.777619,
    0.272068,
    -0.566823,
    0.0,
    0.975331,
    0.190338,
    0.111807,
    0.0,
    0.224313,
    0.450072,
    -0.86436,
    0.0,
    0.841897,
    -0.536898,
    0.0543103,
    0.0,
    0.637123,
    -0.664145,
    -0.391135,
    0.0,
    0.901675,
    -0.422984,
    0.0898189,
    0.0,
    -0.496241,
    0.367413,
    -0.786608,
    0.0,
    -0.255468,
    -0.689763,
    -0.677469,
    0.0,
    -0.0616459,
    -0.951141,
    -0.302539,
    0.0,
    -0.431011,
    -0.889035,
    -0.154425,
    0.0,
    -0.0711688,
    0.486502,
    -0.870776,
    0.0,
    -0.223359,
    -0.36162,
    0.905175,
    0.0,
    -0.678546,
    0.695482,
    -0.23639,
    0.0,
    0.576553,
    0.77934,
    0.245389,
    0.0,
    -0.194568,
    -0.24951,
    0.948624,
    0.0,
    0.28962,
    -0.447736,
    0.845962,
    0.0,
    -0.0403821,
    -0.871893,
    0.488028,
    0.0,
    0.790972,
    -0.560788,
    0.244705,
    0.0,
    -0.34553,
    0.739953,
    0.57713,
    0.0,
    -0.516376,
    -0.697122,
    0.49737,
    0.0,
    0.115998,
    0.859293,
    0.498156,
    0.0,
    0.643831,
    -0.239955,
    0.72657,
    0.0,
    -0.125114,
    0.987348,
    -0.0974144,
    0.0,
    -0.306452,
    0.610699,
    -0.73016,
    0.0,
    -0.269845,
    0.893027,
    -0.360119,
    0.0,
    0.328563,
    -0.570628,
    -0.752615,
    0.0,
    -0.306918,
    -0.42057,
    0.853769,
    0.0,
    0.699245,
    -0.51785,
    0.492837,
    0.0,
    -0.558362,
    -0.469763,
    -0.68378,
    0.0,
    0.476563,
    -0.841398,
    0.254826,
    0.0,
    0.0276172,
    -0.623206,
    0.78157,
    0.0,
    0.587723,
    -0.800313,
    -0.118659,
    0.0,
    0.594035,
    -0.740708,
    0.313806,
    0.0,
    -0.340185,
    -0.887929,
    0.309605,
    0.0,
    0.312245,
    -0.246681,
    -0.917416,
    0.0,
    0.194206,
    0.186398,
    -0.963089,
    0.0,
    0.915704,
    0.329835,
    -0.229553,
    0.0,
    0.94133,
    0.229917,
    0.247055,
    0.0,
    -0.888253,
    -0.144148,
    0.436152,
    0.0,
    -0.906917,
    -0.362625,
    -0.214486,
    0.0,
    0.403108,
    -0.908884,
    0.10693,
    0.0,
    0.983963,
    0.169256,
    0.056292,
    0.0,
    -0.197949,
    0.888236,
    0.414553,
    0.0,
    0.0879741,
    0.247673,
    0.964841,
    0.0,
    0.474384,
    -0.868071,
    -0.146331,
    0.0,
    0.699884,
    0.541342,
    -0.465953,
    0.0,
    0.610965,
    0.567249,
    0.552223,
    0.0,
    0.830508,
    -0.285788,
    -0.478103,
    0.0,
    0.328573,
    -0.683076,
    -0.652263,
    0.0,
    -0.00537775,
    0.873381,
    0.487009,
    0.0,
    -0.51289,
    0.828835,
    0.223557,
    0.0,
    -0.871168,
    -0.15102,
    0.467182,
    0.0,
    -0.545561,
    0.390016,
    -0.741789,
    0.0,
    0.874063,
    0.259258,
    0.410852,
    0.0,
    -0.781555,
    0.612184,
    -0.120005,
    0.0,
    -0.284928,
    0.708938,
    -0.645154,
    0.0,
    -0.568809,
    0.0883274,
    0.817713,
    0.0,
    -0.0429388,
    0.549957,
    -0.834088,
    0.0,
    0.933296,
    -0.127233,
    0.335813,
    0.0,
    0.698149,
    -0.493464,
    0.51873,
    0.0,
    -0.603413,
    0.617495,
    -0.504572,
    0.0,
];

#[repr(align(16))]
pub struct Align16Array<T, const N: usize>(pub [T; N]);

#[inline(always)]
pub fn lerp(a: f32, b: f32, t: f32) -> f32 { a + (b - a) * t }

#[inline(always)]
pub fn fade(t: f32) -> f32 { (t * t * t) * (t * (t * 6.0 - 15.0) + 10.0) }

#[inline(always)]
pub fn grad3(hash: u32, x: f32, y: f32, z: f32) -> f32 {
    let h = hash & 127;
    x * G3[h as usize * 4] + y * G3[h as usize * 4 + 1] + z * G3[h as usize * 4 + 2]
}

pub fn noise(pos: [f32; 3]) -> f32 {
    let [mut x, mut y, mut z] = pos;
    let fx = x.floor();
    let fy = y.floor();
    let fz = z.floor();
    let ix = fx as u32 & 255;
    let iy = fy as u32 & 255;
    let iz = fz as u32 & 255;
    x -= fx;
    y -= fy;
    z -= fz;
    let u = fade(x);
    let v = fade(y);
    let w = fade(z);

    let p00 = PERMUTATIONS[ix as usize] + iy;
    let p000 = PERMUTATIONS[p00 as usize] + iz;
    let p010 = PERMUTATIONS[p00 as usize + 1] + iz;
    let p001 = p000 + 1;
    let p011 = p010 + 1;
    let p10 = PERMUTATIONS[ix as usize + 1] + iy;
    let p100 = PERMUTATIONS[p10 as usize] + iz;
    let p110 = PERMUTATIONS[p10 as usize + 1] + iz;
    let p101 = p100 + 1;
    let p111 = p110 + 1;

    let g000 = grad3(PERMUTATIONS[p000 as usize], x, y, z);
    let g100 = grad3(PERMUTATIONS[p100 as usize], x - 1.0, y, z);
    let g010 = grad3(PERMUTATIONS[p010 as usize], x, y - 1.0, z);
    let g110 = grad3(PERMUTATIONS[p110 as usize], x - 1.0, y - 1.0, z);
    let g001 = grad3(PERMUTATIONS[p001 as usize], x, y, z - 1.0);
    let g101 = grad3(PERMUTATIONS[p101 as usize], x - 1.0, y, z - 1.0);
    let g011 = grad3(PERMUTATIONS[p011 as usize], x, y - 1.0, z - 1.0);
    let g111 = grad3(PERMUTATIONS[p111 as usize], x - 1.0, y - 1.0, z - 1.0);

    lerp(
        lerp(lerp(g000, g100, u), lerp(g010, g110, u), v),
        lerp(lerp(g001, g101, u), lerp(g011, g111, u), v),
        w,
    )
}
